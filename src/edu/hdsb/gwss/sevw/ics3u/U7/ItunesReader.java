/*
 * Name: ItunesReader
 * Date: 04-06-2015 (DD-MM-YYYY)
 * Version: v1
 * Author: Sean van Wyk
 * Description: Program to read Data from Itunes.xml which is written by ItunesWriter
 */
package edu.hdsb.gwss.sevw.ics3u.U7;

import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import nu.xom.Builder;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;

/**
 *
 * @author Sean
 */
public class ItunesReader extends javax.swing.JFrame {

    /**
     * Creates new form ItunesReader
     */
    //Initializing global variables
    public File file = new File("Itunes.xml");
    public Builder builder = new Builder();
    public Document doc;
    public Element root;
    public Elements Genre;
    public DefaultComboBoxModel artistModel = new DefaultComboBoxModel();
    public DefaultComboBoxModel albumModel = new DefaultComboBoxModel();
    public int genreIndex = -1;
    public int artistIndex = -1;
    public int albumIndex = -1;

    public ItunesReader() {
        initComponents();
        //Trycatch for builder
        try {
            doc = builder.build(file);
        } catch (Exception e) {
            System.out.println(e);
        }

        //Initializing variables
        String[] genreName = new String[6];

        //Adding default values to artist and albumModels
        artistModel.addElement("Select Artist");
        albumModel.addElement("Select Album");

        //Getting Root and the Root's Children
        root = doc.getRootElement();
        Genre = root.getChildElements();

        //For loop to populate combo box models and button names
        for (int i = 0; i < Genre.size(); i++) {
            genreName[i] = Genre.get(i).getFirstChildElement("Name").getValue();
            for (int i2 = 1; i2 < Genre.get(i).getChildElements().size(); i2++) {
                Element artist = Genre.get(i).getChildElements().get(i2);
                artistModel.addElement(Genre.get(i).getChildElements().get(i2).getFirstChildElement("Name").getValue());
                for (int i3 = 1; i3 < Genre.get(i).getChildElements().get(i2).getChildElements().size(); i3++) {
                    albumModel.addElement(artist.getChildElements().get(i3).getFirstChildElement("Name").getValue());

                }
            }
        }
        //Seting combo box models
        comboBoxAlbum.setModel(albumModel);
        comboBoxArtist.setModel(artistModel);

        //Naming Buttons after genres stored
        if (genreName.length >= 1) {
            buttonGenre0.setText(genreName[0]);
        }
        if (genreName.length >= 2) {
            buttonGenre1.setText(genreName[1]);
        }
        if (genreName.length >= 3) {
            buttonGenre2.setText(genreName[2]);
        }
        if (genreName.length >= 4) {
            buttonGenre3.setText(genreName[3]);
        }
        if (genreName.length >= 5) {
            buttonGenre4.setText(genreName[4]);
        }
        if (genreName.length == 6) {
            buttonGenre5.setText(genreName[5]);
        }

        int columnWidth = 100;
        tableSongDisplay.getColumnModel().getColumn(0).setMinWidth(columnWidth * 2);
        tableSongDisplay.getColumnModel().getColumn(1).setMinWidth(columnWidth * 3 / 2);
        tableSongDisplay.getColumnModel().getColumn(2).setMinWidth(columnWidth);
        tableSongDisplay.getColumnModel().getColumn(3).setMinWidth(columnWidth);
        tableSongDisplay.getColumnModel().getColumn(4).setMinWidth(columnWidth);
        tableSongDisplay.getColumnModel().getColumn(5).setMinWidth(columnWidth);
        tableSongDisplay.getColumnModel().getColumn(6).setMinWidth(columnWidth);
        tableSongDisplay.getColumnModel().getColumn(7).setMinWidth(columnWidth * 2);

        //Calling set Song List method
        displayDefaulsSongList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGenre = new javax.swing.ButtonGroup();
        jScrollBar1 = new javax.swing.JScrollBar();
        buttonGenre0 = new javax.swing.JRadioButton();
        buttonGenre1 = new javax.swing.JRadioButton();
        buttonGenre2 = new javax.swing.JRadioButton();
        buttonGenre3 = new javax.swing.JRadioButton();
        buttonGenre4 = new javax.swing.JRadioButton();
        buttonGenre5 = new javax.swing.JRadioButton();
        comboBoxArtist = new javax.swing.JComboBox();
        comboBoxAlbum = new javax.swing.JComboBox();
        resetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSongDisplay = new javax.swing.JTable();

        jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroupGenre.add(buttonGenre0);
        buttonGenre0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre0ActionPerformed(evt);
            }
        });

        buttonGroupGenre.add(buttonGenre1);
        buttonGenre1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre1ActionPerformed(evt);
            }
        });

        buttonGroupGenre.add(buttonGenre2);
        buttonGenre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre2ActionPerformed(evt);
            }
        });

        buttonGroupGenre.add(buttonGenre3);
        buttonGenre3.setContentAreaFilled(false);
        buttonGenre3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre3ActionPerformed(evt);
            }
        });

        buttonGroupGenre.add(buttonGenre4);
        buttonGenre4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre4ActionPerformed(evt);
            }
        });

        buttonGroupGenre.add(buttonGenre5);
        buttonGenre5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenre5ActionPerformed(evt);
            }
        });

        comboBoxArtist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxArtistActionPerformed(evt);
            }
        });

        comboBoxAlbum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxAlbumActionPerformed(evt);
            }
        });

        resetButton.setText("No Genre");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setToolTipText("");
        jScrollPane1.setHorizontalScrollBar(jScrollBar1);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(560, 560));

        tableSongDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableSongDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song Name", "Artist", "Album", "Genre", "Rating", "Length", "Track Number", "Number of Plays"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableSongDisplay.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableSongDisplay.setCellSelectionEnabled(true);
        tableSongDisplay.setMaximumSize(new java.awt.Dimension(2147483647, 200));
        tableSongDisplay.setMinimumSize(new java.awt.Dimension(500, 64));
        tableSongDisplay.setShowVerticalLines(true);
        jScrollPane1.setViewportView(tableSongDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonGenre2)
                                    .addComponent(buttonGenre1)
                                    .addComponent(buttonGenre0))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonGenre3)
                                    .addComponent(buttonGenre5)
                                    .addComponent(buttonGenre4))))
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonGenre0)
                            .addComponent(buttonGenre3)))
                    .addComponent(comboBoxArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGenre1)
                    .addComponent(buttonGenre4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonGenre2)
                            .addComponent(buttonGenre5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxArtistActionPerformed
        //Gets artist String to search for   
        String artistName = (String) comboBoxArtist.getSelectedItem();

        //Loop to search for the indcies of selected artist
        for (int i = 0; i < root.getChildElements().size(); i++) {
            for (int i2 = 1; i2 < root.getChildElements().get(i).getChildElements().size(); i2++) {
                if (root.getChildElements().get(i).getChildElements().get(i2).getFirstChildElement("Name").getValue().equals(artistName)) {
                    genreIndex = i;
                    artistIndex = i2;
                }
            }
        }

        //Uses that index to set the song list to either default or song belonging to that artist
        if (artistName.equals("Select Artist")) {
            displayDefaulsSongList();
        } else {
            updateSongList("artist", artistIndex);
        }

        //Call Set album Wich will set the album combo box to albums belonging to this artist
        setAlbum();


    }//GEN-LAST:event_comboBoxArtistActionPerformed

    private void comboBoxAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxAlbumActionPerformed
        //Gets values from the combo boxes to use
        String artistName = (String) comboBoxArtist.getSelectedItem();
        String albumName = (String) comboBoxAlbum.getSelectedItem();

        //Loop to get Indcies of album artist and genre names
        for (int i = 0; i < root.getChildElements().size(); i++) {
            for (int i2 = 1; i2 < root.getChildElements().get(i).getChildElements().size(); i2++) {
                for (int i3 = 1; i3 < root.getChildElements().get(i).getChildElements().get(i2).getChildElements().size(); i3++) {
                    if (root.getChildElements().get(i).getChildElements().get(i2).getChildElements().get(i3).getFirstChildElement("Name").getValue().equals(albumName)) {
                        genreIndex = i;
                        artistIndex = i2;
                        albumIndex = i3;
                    }
                }
            }
        }

        //Uses the index of album to set the song list to the default or the songs that belong to this album
        if (albumName.equals("Select Album")) {
            //Uses that index to set the song list to either default or song belonging to that artist
            if (artistName.equals("Select Artist")) {
                displayDefaulsSongList();
                resetDefaultComboBoxModel();
            } else {
                updateSongList("artist", artistIndex);
            }
        } else {
            updateSongList("Album", albumIndex);
        }
    }//GEN-LAST:event_comboBoxAlbumActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        //Clears all buttons pressed down
        buttonGroupGenre.clearSelection();

        //Resets selected genreIndex to none (-1)
        genreIndex = -1;

        //Resets the comboBoxes and song list to default
        resetDefaultComboBoxModel();
        displayDefaulsSongList();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void buttonGenre0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre0ActionPerformed
        //Sets the genre Index
        genreIndex = 0;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre0ActionPerformed

    private void buttonGenre1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre1ActionPerformed
        //Sets the genre Index
        genreIndex = 1;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre1ActionPerformed

    private void buttonGenre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre2ActionPerformed
        //Sets the genre Index
        genreIndex = 2;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre2ActionPerformed

    private void buttonGenre3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre3ActionPerformed
        //Sets the genre Index
        genreIndex = 3;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre3ActionPerformed

    private void buttonGenre4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre4ActionPerformed
        //Sets the genre Index
        genreIndex = 4;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre4ActionPerformed

    private void buttonGenre5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenre5ActionPerformed
        //Sets the genre Index
        genreIndex = 5;
        //Sets all comboBoxes with crrosponding indcies and updates songlist
        setComboBoxesGenre();
        updateSongList("Genre", genreIndex);
    }//GEN-LAST:event_buttonGenre5ActionPerformed

    public void updateSongList(String level, int Index) {
        //get model
        DefaultTableModel model = (DefaultTableModel) tableSongDisplay.getModel();

        //remove all rows
        int row = model.getRowCount();
        for (int i = 0; i < row; i++) {
            model.removeRow(0);
        }

        //set songlist details for genre known
        if (level.toLowerCase().equals("genre")) {

            //creates an element to reduce the length of code used to reference a location
            Elements genreLoc = root.getChildElements().get(genreIndex).getChildElements();

            //Gets value of genreName to display later
            String genreName = root.getChildElements().get(genreIndex).getFirstChildElement("Name").getValue();

            //Loops for number of artists
            for (int iArtist = 1; iArtist < genreLoc.size(); iArtist++) {

                //creates an element to reduce the length of code used to reference a location
                Elements artistLoc = genreLoc.get(iArtist).getChildElements();

                //Gets value of artistName to display
                String artistName = genreLoc.get(iArtist).getFirstChildElement("Name").getValue();

                //Loops for number of albums
                for (int iAlbum = 1; iAlbum < artistLoc.size(); iAlbum++) {

                    //creates an element to reduce the length of code used to reference a location
                    Elements albumLoc = artistLoc.get(iAlbum).getChildElements();

                    //gets value of AlbumName to display
                    String albumName = artistLoc.get(iAlbum).getFirstChildElement("Name").getValue();

                    //Loops for number of songs
                    for (int iSong = 1; iSong < albumLoc.size(); iSong++) {

                        //creates an element to reduce the length of code used to reference a location
                        Element songLoc = albumLoc.get(iSong).getChildElements().get(0);

                        //Gets values to display from file
                        String songName = songLoc.getFirstChildElement("Name").getValue();
                        String length = songLoc.getFirstChildElement("Length").getValue();
                        String rating = songLoc.getFirstChildElement("Rating").getValue();
                        int plays = Integer.parseInt(songLoc.getFirstChildElement("Plays").getValue());
                        String trackNumber = songLoc.getFirstChildElement("Track").getValue();

                        //Displays values
                        model.addRow(new Object[]{"" + songName, "" + artistName, "" + albumName, "" + genreName, "" + length, "" + rating, "" + plays, "" + trackNumber});

                    }
                }
            }
        }

        //set songlist details for genre and artist known
        //Repeates steps of previous if statment except the Genre and Artist are know
        if (level.toLowerCase().equals("artist")) {
            Elements artistLoc = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getChildElements();
            String artistName = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getFirstChildElement("Name").getValue();
            String genreName = root.getChildElements().get(genreIndex).getFirstChildElement("Name").getValue();
            for (int iAlbum = 1; iAlbum < artistLoc.size(); iAlbum++) {
                Elements albumLoc = artistLoc.get(iAlbum).getChildElements();
                String albumName = artistLoc.get(iAlbum).getFirstChildElement("Name").getValue();
                for (int iSong = 1; iSong < albumLoc.size(); iSong++) {
                    Element songLoc = albumLoc.get(iSong).getChildElements().get(0);
                    String songName = songLoc.getFirstChildElement("Name").getValue();
                    String length = songLoc.getFirstChildElement("Length").getValue();
                    String rating = songLoc.getFirstChildElement("Rating").getValue();
                    int plays = Integer.parseInt(songLoc.getFirstChildElement("Plays").getValue());
                    String trackNumber = songLoc.getFirstChildElement("Track").getValue();

                    model.addRow(new Object[]{"" + songName, "" + artistName, "" + albumName, "" + genreName, "" + length, "" + rating, "" + plays, "" + trackNumber});
                }
            }
        }

        //set songlist details for genre artist and album known
        //Repeats steps of of first if statement excetp genre,artist and album are known
        if (level.toLowerCase().equals("album")) {
            String artistName = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getFirstChildElement("Name").getValue();
            String albumName = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getChildElements().get(albumIndex).getFirstChildElement("Name").getValue();
            String genreName = root.getChildElements().get(genreIndex).getFirstChildElement("Name").getValue();
            Elements albumLoc = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getChildElements().get(albumIndex).getChildElements();
            for (int iSong = 1; iSong < albumLoc.size(); iSong++) {
                Element songLoc = albumLoc.get(iSong).getChildElements().get(0);
                String songName = songLoc.getFirstChildElement("Name").getValue();
                String length = songLoc.getFirstChildElement("Length").getValue();
                String rating = songLoc.getFirstChildElement("Rating").getValue();
                int plays = Integer.parseInt(songLoc.getFirstChildElement("Plays").getValue());
                String trackNumber = songLoc.getFirstChildElement("Track").getValue();

                model.addRow(new Object[]{"" + songName, "" + artistName, "" + albumName, "" + genreName, "" + length, "" + rating, "" + plays, "" + trackNumber});

            }
        }
        tableSongDisplay.setModel(model);
    }

    private void displayDefaulsSongList() {
        //Clears any button selections
        buttonGroupGenre.clearSelection();

        //Gets current DefaultTableModel
        DefaultTableModel model = (DefaultTableModel) tableSongDisplay.getModel();

        //Empties curretn default table model of all rows
        int row = model.getRowCount();
        for (int i = 0; i < row; i++) {
            model.removeRow(0);
        }

        //Loops for number of genres
        for (int iGenre = 0; iGenre < root.getChildElements().size(); iGenre++) {

            //creates an Elemetn variable to reduce code length
            Elements genreLoc = root.getChildElements().get(iGenre).getChildElements();
            
            //Gets genreName to be displayed later
            String genreName = root.getChildElements().get(iGenre).getFirstChildElement("Name").getValue();
            
            //Loops for number of artists
            for (int iArtist = 1; iArtist < genreLoc.size(); iArtist++) {

                //creates an Elemetn variable to reduce code length
                Elements artistLoc = genreLoc.get(iArtist).getChildElements();
                
                //Gets artistName to be displayed later
                String artistName = genreLoc.get(iArtist).getFirstChildElement("Name").getValue();
                
                //Loops for numbers of albums
                for (int iAlbum = 1; iAlbum < artistLoc.size(); iAlbum++) {

                    //creates an Elemetn variable to reduce code length
                    Elements albumLoc = artistLoc.get(iAlbum).getChildElements();
                    
                    //gets albumName to be displayed later
                    String albumName = artistLoc.get(iAlbum).getFirstChildElement("Name").getValue();
                    
                    //loops for number of songs
                    for (int iSong = 1; iSong < albumLoc.size(); iSong++) {

                        //creates an Elemetn variable to reduce code length
                        Element songLoc = albumLoc.get(iSong).getChildElements().get(0);
                        String songName = songLoc.getFirstChildElement("Name").getValue();
                        String length = songLoc.getFirstChildElement("Length").getValue();
                        String rating = songLoc.getFirstChildElement("Rating").getValue();
                        int plays = Integer.parseInt(songLoc.getFirstChildElement("Plays").getValue());
                        String trackNumber = songLoc.getFirstChildElement("Track").getValue();
                        
                        //Displays data to table
                        model.addRow(new Object[]{"" + songName, "" + artistName, "" + albumName, "" + genreName, "" + length, "" + rating, "" + plays, "" + trackNumber});

                    }
                }
            }
        }
        tableSongDisplay.setModel(model);
    }

    public void resetDefaultComboBoxModel() {
        //Rewrites exhisting model to blank
        artistModel = new DefaultComboBoxModel();
        albumModel = new DefaultComboBoxModel();
        
        //Adds default value to the new models
        artistModel.addElement("Select Artist");
        albumModel.addElement("Select Album");
        
        //loops for number of artists
        for (int i = 0; i < Genre.size(); i++) {
            for (int i2 = 1; i2 < Genre.get(i).getChildElements().size(); i2++) {
                
                //creates an element to reduce code length
                Element artist = Genre.get(i).getChildElements().get(i2);
                
                //adds artist name to artist model
                artistModel.addElement(Genre.get(i).getChildElements().get(i2).getFirstChildElement("Name").getValue());
                
                //Loops for number of albums
                for (int i3 = 1; i3 < Genre.get(i).getChildElements().get(i2).getChildElements().size(); i3++) {
                    
                    //adds album names to model
                    albumModel.addElement(artist.getChildElements().get(i3).getFirstChildElement("Name").getValue());
                }
            }
        }
        
        //sets models
        comboBoxAlbum.setModel(albumModel);
        comboBoxArtist.setModel(artistModel);
    }

    public void setComboBoxesGenre() {
        
        //Overwrites exhisting comboBox Models
        artistModel = new DefaultComboBoxModel();
        albumModel = new DefaultComboBoxModel();
        
        //adds defaults to new models
        artistModel.addElement("Select Artist");
        albumModel.addElement("Select Album");
        
        //adds a elements veriable to reduce code length
        Elements artistLoc = root.getChildElements().get(genreIndex).getChildElements();

        //loop to populate models
        for (int i = 1; i < artistLoc.size(); i++) {
            artistModel.addElement(artistLoc.get(i).getFirstChildElement("Name").getValue());
            for (int i2 = 1; i2 < artistLoc.get(i).getChildElements().size(); i2++) {
                albumModel.addElement(artistLoc.get(i).getChildElements().get(i2).getFirstChildElement("Name").getValue());
            }
        }
        
        //Sets comboBoxes to models
        comboBoxAlbum.setModel(albumModel);
        comboBoxArtist.setModel(artistModel);
    }

    public void setAlbum() {
        //Creates a new album model and sets its default
        albumModel = new DefaultComboBoxModel();
        albumModel.addElement("Select Album");
        
        //creates a new Element variable to cut down on code length
        Elements albumLoc = root.getChildElements().get(genreIndex).getChildElements().get(artistIndex).getChildElements();
        
        //checks if it needs to reset the combo box or update it
        if (artistIndex == 0) {
            resetDefaultComboBoxModel();
        } else {
            for (int i = 1; i < albumLoc.size(); i++) {
                
                //Adds alums to album model
                albumModel.addElement(albumLoc.get(i).getFirstChildElement("Name").getValue());
            }
        }
        
        //sets album model
        comboBoxAlbum.setModel(albumModel);
    }

    public void setGenreButton(int index) {
        buttonGroupGenre.clearSelection();
        switch (index) {
            case 0:
                buttonGenre0.setSelected(true);
                break;
            case 1:
                buttonGenre1.setSelected(true);
                break;
            case 2:
                buttonGenre2.setSelected(true);
                break;
            case 3:
                buttonGenre3.setSelected(true);
                break;
            case 4:
                buttonGenre4.setSelected(true);
                break;
            case 5:
                buttonGenre5.setSelected(true);
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItunesReader.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItunesReader.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItunesReader.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItunesReader.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItunesReader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton buttonGenre0;
    private javax.swing.JRadioButton buttonGenre1;
    private javax.swing.JRadioButton buttonGenre2;
    private javax.swing.JRadioButton buttonGenre3;
    private javax.swing.JRadioButton buttonGenre4;
    private javax.swing.JRadioButton buttonGenre5;
    private javax.swing.ButtonGroup buttonGroupGenre;
    private javax.swing.JComboBox comboBoxAlbum;
    private javax.swing.JComboBox comboBoxArtist;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JTable tableSongDisplay;
    // End of variables declaration//GEN-END:variables
}
//IV,VI,I,XIV,         ,V.,W.,
//XV/V/MMXV