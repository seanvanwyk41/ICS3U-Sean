/*
 * Name: ItunesWriter
 * Date: 04-06-2015 (DD-MM-YYYY)
 * Version: v1
 * Author: Sean van Wyk
 * Description: Program to write data to Itunes.xml which will be read by ItunesReader
 */
package edu.hdsb.gwss.sevw.ics3u.U7;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import nu.xom.Builder;

import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Serializer;

/**
 *
 * @author Sean
 */
public class ItunesWriter extends javax.swing.JFrame {

    /**
     * Creates new form SchoolXMLGUI
     */
    Document iTunesData;
    File file = new File("Itunes.xml");
    Builder builder = new Builder();
    Element iTunes;

    public ItunesWriter() {
        initComponents();

        try {
            iTunesData = builder.build(file);
            iTunes = iTunesData.getRootElement();
            if (iTunes == null) {
                iTunes = new Element("Genres");
                iTunesData.appendChild(iTunes);
            }
        } catch (Exception e) {
            iTunes = new Element("Genres");
            iTunesData = new Document(iTunes);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        genreButtons = new javax.swing.ButtonGroup();
        writer = new javax.swing.JPanel();
        xmlEditorTittle = new java.awt.Label();
        headerArtist = new javax.swing.JLabel();
        headerSongName = new javax.swing.JLabel();
        headerRating = new javax.swing.JLabel();
        headerLength = new javax.swing.JLabel();
        headerAlbum = new javax.swing.JLabel();
        headerSlider = new javax.swing.JLabel();
        headerTracks = new javax.swing.JLabel();
        headerPlays = new javax.swing.JLabel();
        fieldLength = new javax.swing.JTextField();
        fieldArtist = new javax.swing.JTextField();
        fieldSongName = new javax.swing.JTextField();
        fieldAlbumName = new javax.swing.JTextField();
        fieldPlays = new javax.swing.JTextField();
        genreClasicalButton = new javax.swing.JRadioButton();
        genrePopButton = new javax.swing.JRadioButton();
        genreRockButton = new javax.swing.JRadioButton();
        genreOtherButton = new javax.swing.JRadioButton();
        genreCountryButton = new javax.swing.JRadioButton();
        genreTechnoButton = new javax.swing.JRadioButton();
        sliderRatings = new javax.swing.JSlider();
        spinnerTrack = new javax.swing.JSpinner();
        runButton = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        writer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        xmlEditorTittle.setText("Itunes Writer");

        headerArtist.setText("Enter Artist");

        headerSongName.setText("Enter Song Name");

        headerRating.setText("Rating");

        headerLength.setText("Enter Length");

        headerAlbum.setText("Enter Album Name ");

        headerSlider.setText("1             2             3             4               5");

        headerTracks.setText("Enter Track Number");

        headerPlays.setText("Enter Number Of Plays ");

        genreButtons.add(genreClasicalButton);
        genreClasicalButton.setText("Clasic");

        genreButtons.add(genrePopButton);
        genrePopButton.setText("Pop");

        genreButtons.add(genreRockButton);
        genreRockButton.setText("Rock");

        genreButtons.add(genreOtherButton);
        genreOtherButton.setText("Other");

        genreButtons.add(genreCountryButton);
        genreCountryButton.setText("Country");

        genreButtons.add(genreTechnoButton);
        genreTechnoButton.setText("Techno");

        sliderRatings.setMaximum(4);
        sliderRatings.setSnapToTicks(true);

        runButton.setText("Enter");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout writerLayout = new javax.swing.GroupLayout(writer);
        writer.setLayout(writerLayout);
        writerLayout.setHorizontalGroup(
            writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writerLayout.createSequentialGroup()
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(writerLayout.createSequentialGroup()
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headerSongName)
                            .addComponent(headerArtist)
                            .addComponent(headerLength))
                        .addGap(34, 34, 34)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldArtist)
                            .addComponent(fieldSongName)
                            .addComponent(fieldLength)))
                    .addGroup(writerLayout.createSequentialGroup()
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(writerLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(headerAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(headerTracks))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldAlbumName)
                            .addGroup(writerLayout.createSequentialGroup()
                                .addComponent(spinnerTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(writerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(xmlEditorTittle, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(genreClasicalButton)
                            .addComponent(genrePopButton)
                            .addComponent(genreRockButton))
                        .addGap(18, 18, 18)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genreTechnoButton)
                            .addComponent(genreCountryButton)
                            .addComponent(genreOtherButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(writerLayout.createSequentialGroup()
                        .addComponent(headerPlays)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldPlays)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, writerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(writerLayout.createSequentialGroup()
                        .addComponent(headerRating, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(sliderRatings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(writerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runButton)
                            .addComponent(headerSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35))
        );

        writerLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {genreClasicalButton, genreCountryButton, genreOtherButton, genrePopButton, genreRockButton, genreTechnoButton});

        writerLayout.setVerticalGroup(
            writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writerLayout.createSequentialGroup()
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(writerLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(xmlEditorTittle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, writerLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genreRockButton)
                            .addComponent(genreCountryButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genrePopButton)
                            .addComponent(genreTechnoButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genreOtherButton)
                            .addComponent(genreClasicalButton))
                        .addGap(18, 18, 18)))
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerArtist)
                    .addComponent(fieldArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerSongName)
                    .addComponent(fieldSongName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAlbumName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerTracks)
                    .addComponent(spinnerTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerPlays)
                    .addComponent(fieldPlays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(headerSlider)
                .addGap(11, 11, 11)
                .addGroup(writerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderRatings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerRating))
                .addGap(18, 18, 18)
                .addComponent(runButton)
                .addGap(130, 130, 130))
        );

        writerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {genreClasicalButton, genreCountryButton, genreOtherButton, genrePopButton, genreRockButton, genreTechnoButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(writer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(writer, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //Variables
        boolean found = false;
        int artistIndex = 0;
        int genreIndex = 0;
        int albumIndex = 0;
        String albumEntered = fieldAlbumName.getText();
        String artistEntered = fieldArtist.getText();

        //Genre Set
        String genreType;
        if (genreClasicalButton.isSelected()) {
            genreType = "Clasical";
        } else if (genreCountryButton.isSelected()) {
            genreType = "Country";
        } else if (genreRockButton.isSelected()) {
            genreType = "Rock";
        } else if (genrePopButton.isSelected()) {
            genreType = "Pop";
        } else if (genreTechnoButton.isSelected()) {
            genreType = "Techno";
        } else {
            genreType = "Other";
        }

        //Check if GenreExists
        for (int i = 0; i < iTunes.getChildElements().size(); i++) {
            if (iTunes.getChildElements().get(i).getFirstChildElement("Name").getValue().equals(genreType)) {
                genreIndex = i;
                found = true;
            }
        }
        if (!found) {
            Element genre = new Element("Genre");
            Element genreName = new Element("Name");
            genreName.appendChild(genreType);
            genre.appendChild(genreName);
            iTunes.appendChild(genre);
            genreIndex = iTunes.getChildElements().size() - 1;
        }
        found = false;

        Element genreSpot = iTunes.getChildElements().get(genreIndex);
        
        //Check if Artist Exists
        for (int i = 1; i < genreSpot.getChildElements().size(); i++) {
            if (genreSpot.getChildElements().get(i).getFirstChildElement("Name").getValue().equals(artistEntered)) {
                artistIndex = i;
                found = true;
            }
        }
        if (!found) {
            Element artist = new Element("Artist");
            Element artistName = new Element("Name");
            artistName.appendChild(artistEntered);
            artist.appendChild(artistName);
            genreSpot.appendChild(artist);
            artistIndex = genreSpot.getChildCount() - 1;
        }
        found = false;

        Element artistSpot = genreSpot.getChildElements().get(artistIndex);

        //Check if Album Exists
        for (int i = 1; i < artistSpot.getChildCount(); i++) {
            if (artistSpot.getChildElements().get(i).getFirstChildElement("Name").getValue().equals(albumEntered)) {
                albumIndex = i;
                found = true;
            }
        }
        if (!found) {
            Element album = new Element("Album");
            Element albumName = new Element("Name");
            albumName.appendChild(albumEntered);
            
            album.appendChild(albumName);
            artistSpot.appendChild(album);
            albumIndex = artistSpot.getChildCount() - 1;
        }
        
        found = false;

        Element albumSpot = artistSpot.getChildElements().get(albumIndex);
        //song Elements
        Element songs = new Element("Songs");
        Element song = new Element("Song");
        Element songName = new Element("Name");
        Element songLength = new Element("Length");
        Element songPlays = new Element("Plays");
        Element songRatings = new Element("Rating");
        Element songTrack = new Element("Track");

        //Heirachy
        songPlays.appendChild(fieldPlays.getText());
        songName.appendChild(fieldSongName.getText());
        songLength.appendChild(fieldLength.getText());
        songRatings.appendChild("" + (double)sliderRatings.getValue() + " Stars");
        songTrack.appendChild("Track Number: " + spinnerTrack.getValue());
        song.appendChild(songPlays);
        song.appendChild(songName);
        song.appendChild(songLength);
        song.appendChild(songRatings);
        song.appendChild(songTrack);
        songs.appendChild(song);
        albumSpot.appendChild(songs);
        
        //Serializer
        try {
            Serializer serializer = new Serializer(System.out);
            serializer.setIndent(4);
            serializer.setMaxLength(64);
            serializer.write(iTunesData);
        } catch (IOException ex) {
            System.err.println(ex);

        }
        try {
            BufferedWriter output = new BufferedWriter(new FileWriter("Itunes.xml"));
            output.write(iTunesData.toXML());
            output.close();
        } catch (IOException ex) {
            System.out.println(ex);
        }
        fieldSongName.setText("");
        fieldPlays.setText("");
       
        fieldLength.setText("");
        


    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchoolXMLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchoolXMLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchoolXMLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchoolXMLGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItunesWriter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldAlbumName;
    private javax.swing.JTextField fieldArtist;
    private javax.swing.JTextField fieldLength;
    private javax.swing.JTextField fieldPlays;
    private javax.swing.JTextField fieldSongName;
    private javax.swing.ButtonGroup genreButtons;
    private javax.swing.JRadioButton genreClasicalButton;
    private javax.swing.JRadioButton genreCountryButton;
    private javax.swing.JRadioButton genreOtherButton;
    private javax.swing.JRadioButton genrePopButton;
    private javax.swing.JRadioButton genreRockButton;
    private javax.swing.JRadioButton genreTechnoButton;
    private javax.swing.JLabel headerAlbum;
    private javax.swing.JLabel headerArtist;
    private javax.swing.JLabel headerLength;
    private javax.swing.JLabel headerPlays;
    private javax.swing.JLabel headerRating;
    private javax.swing.JLabel headerSlider;
    private javax.swing.JLabel headerSongName;
    private javax.swing.JLabel headerTracks;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton runButton;
    private javax.swing.JSlider sliderRatings;
    private javax.swing.JSpinner spinnerTrack;
    private javax.swing.JPanel writer;
    private java.awt.Label xmlEditorTittle;
    // End of variables declaration//GEN-END:variables
}
//IV,VI,I,XIV,         ,V.,W.,
//XV/V/MMXV